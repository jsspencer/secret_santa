#!/usr/bin/python
'''secret_santa santa_file

Randomly assign secret santas: each person in a group is randomly assigned
someone else in the group (other than themselves) for whom to buy a gift.

santa_file is a simple ini file.  The santas section contains all the people in
the group, with the name and value pairs representing the person's name and
their email address respectively.  If the email functionality is not used, then
the email addresses can be left blank.  For example:

[santas]
Joe Bloggs = joe.bloggs@example.net
Fred Bloggs = fred.bloggs@example.net
'''
# copyright (c) 2012 James Spencer.
# All rights reserved.
#
# Modified BSD License; see LICENSE for more details

try:
    import configparser
except ImportError:
    # using python 2
    import ConfigParser as configparser
import copy
import random
import sys

class Person:
    '''Class to hold basic information about a person.

name: person's name
email: person's email address
'''
    def __init__(self, name, email=None):
        self.name = name
        self.email = email
    def __hash__(self):
        return hash((self.name, self.email))
    def __eq__(self, other):
        if isinstance(other, Person):
            return (self.name, self.email) == (other.name, other.email)
        else:
            raise NotImplementedError

def assign_secret_santas(people, send_email=False, verbose=True):
    '''Assign each person at random to give and receive a gift.

people: list of Person objects, each representing a secret santa.  Each person
is randomly assigned to get a present for someone else in the list.

send_email: ignored.
verbose: print secret santa assignments to screen.
'''

    # Ensure everyone is only entered once.
    people = list(set(people))

    # Put people in a random order.  This essentially removes the bias
    # discussed below.
    random.shuffle(people)

    unassigned = copy.copy(people)

    pairs = []
    for i in range(len(people)):

        santa = people[i]

        # Who is still needs to be assigned a secret santa?
        potential_recipients = copy.copy(unassigned)
        # Not allowed to give to themselves!
        try:
            potential_recipients.remove(santa)
        except ValueError:
            pass

        if i == len(people)-2 and people[-1] in potential_recipients:
            # Only two people left and the last person is still to be assigned.
            # This santa *must* be assigned to the last person.
            # (Note that this condition, whilst simple and fast, leads to a
            # slightly biased distribution for a given order of people.  For
            # a true random selection we need to enumerate all allowed
            # combinations and then uniformly select one, but that leads to an
            # O(N!) algorithm rather than an O(N) algorithm.)
            recipient = people[-1]
        else:
            # Select a random recipient...
            noptions = len(potential_recipients)
            recipient = potential_recipients[random.randint(0, noptions-1)]

        pairs.append((santa, recipient))

        unassigned.remove(recipient)

    if verbose:
        santa_col_name = 'Secret Santa' 
        recipient_col_name = 'Recipient'
        longest_name_len = max(len(person.name) for person in people)
        table_format = ('%%-%is  |  %%-%is' %
                            (max(longest_name_len, len(santa_col_name)),
                             max(longest_name_len, len(recipient_col_name)))
                       )
        header = table_format % (santa_col_name, recipient_col_name)
        print(header)
        print('='*len(header))
        for (santa, recipient) in pairs:
            print(table_format % (santa.name, recipient.name))

    # TODO: email output.

def read_config(config_file):
    '''Read configuration from config_file.

See top-level doc string for the format of the configuration file.
    
returns: (people,)
    people: list of people (each a Person object) taking part in secret santa.
'''

    conf = configparser.RawConfigParser()
    conf.optionxform = str

    conf.read(config_file)

    # Get all the people doing secret santa 
    people = []
    for (name, email) in conf.items(section='santas'):
        people.append(Person(name, email))

    return (people,)

if __name__ == '__main__':

    if len(sys.argv) == 2:
        (people,) = read_config(sys.argv[1])
    else:
        print(__doc__)
        sys.exit()

    assign_secret_santas(people)
